# This file is incomplete and just for typing stubs around the swig generated files. These are hand-updated and should be checked whenever the c-code changes.
from typing import Union, Optional, Tuple

class vol:
    def __init__(self, *args) -> None: ...
    def size_x(self) -> int: ...
    def size_y(self) -> int: ...
    def size_z(self) -> int: ...
    @property
    def shape(self) -> Tuple[int, int, int]: ...
    def getFtSizeX(self) -> float: ...
    def getFtSizeY(self) -> float: ...
    def getFtSizeZ(self) -> float: ...
    def setFtSizeX(self, size_x: float) -> None: ...
    def setFtSizeY(self, size_y: float) -> None: ...
    def setFtSizeZ(self, size_z: float) -> None: ...
    def strideX(self) -> int: ...
    def strideY(self) -> int: ...
    def strideZ(self) -> int: ...
    def write(self, fileName: str, fileType: Optional[str] = ...) -> None: ...
    def info(self, name: str) -> None: ... #TODO: check if this is correct
    def numelem(self) -> int: ...
    def equalsTo(self, v:vol) -> bool: ...
    def getV(self, x:int, y:int, z:int) -> float: ...
    def setV(self, val: float, x:int, y:int, z:int) -> None: ...
    def setAll(self, val: float) -> None: ...
    def copyVolume(self, v2: vol) -> None: ...
    def shiftscale(self, shiftV: float, scaleV: float) -> None: ...
    def dims(self) -> int: ...
    def __add__(self, otherVol: Union[vol, float]) -> vol: ...
    def __mul__(self, otherVol: Union[vol, float]) -> vol: ...
    def __sub__(self, otherVol: Union[vol, float]) -> vol: ...
    def __truediv__(self, otherVol: Union[vol, float]) -> vol: ...
    __div__ = __truediv__
    def __call__(self, *args: float) -> float: ...

# Methods
def subvolume(source: vol, startX: int, startY: int, startZ: int, endX: int, endY: int, endZ: int) -> vol:...
def rescaleSpline(source: vol, destination: vol) -> int: ...
def peak(volume: vol, mask: Optional[vol]=...) -> Tuple[int, int, int]: ...
